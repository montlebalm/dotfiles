-- Set <space> as the leader key
--  NOTE: Must happen before plugins are required (otherwise wrong leader will be used)
vim.keymap.set('n', '<SPACE>', '<Nop>', {})
vim.g.mapleader = ' '

--
-- lazy.nvim
--

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require('lazy').setup({
  -- Git related plugins
  'tpope/vim-fugitive',
  'tpope/vim-rhubarb',

  -- Detect tabstop and shiftwidth automatically
  'tpope/vim-sleuth',

  -- Change surround characters
  'tpope/vim-surround',

  -- Text objects
  {
    'kana/vim-textobj-entire',
    dependencies = {
      'kana/vim-textobj-user',
    }
  },

  -- Autopair
  'cohama/lexima.vim',

  -- LSP Configuration & Plugins
  {
    'neovim/nvim-lspconfig',
    dependencies = {
      -- Automatically install LSPs to stdpath for neovim
      'williamboman/mason.nvim',
      'williamboman/mason-lspconfig.nvim',

      -- Useful status updates for LSP
      { 'j-hui/fidget.nvim', opts = {} },

      -- Additional lua configuration, makes nvim stuff amazing!
      {
        'folke/neodev.nvim',
        config = function()
          require('neodev').setup()
        end,
      },
    },
  },

  {
    -- Autocompletion
    'hrsh7th/nvim-cmp',
    dependencies = {
      'hrsh7th/cmp-path',
      'hrsh7th/cmp-nvim-lsp',
      'L3MON4D3/LuaSnip',
      'saadparwaiz1/cmp_luasnip'
    },
  },

  -- Buffers
  -- {
  --   'qpkorr/vim-bufkill',
  --   config = function()
  --     vim.g.BufKillCreateMappings = 0
  --     vim.cmd [[ let g:BufKillCreateMappings = 0 ]]
  --   end
  -- },

  -- Useful plugin to show you pending keybinds.
  { 'folke/which-key.nvim',  opts = {} },

  -- Adds git releated signs to the gutter (and utils)
  {
    'lewis6991/gitsigns.nvim',
    config = function()
      require('gitsigns').setup({
        attach_to_untracked = false,
        signs = {
          add = { text = '+' },
          change = { text = '~' },
          delete = { text = '_' },
          topdelete = { text = '‾' },
          changedelete = { text = '~' },
        },
        on_attach = function(bufnr)
          local gs = package.loaded.gitsigns

          local function map(mode, l, r, opts)
            opts = opts or {}
            opts.buffer = bufnr
            vim.keymap.set(mode, l, r, opts)
          end

          -- Jump to next hunk
          map('n', ']c', function()
            if vim.wo.diff then return ']c' end
            vim.schedule(function() gs.next_hunk() end)
            return '<Ignore>'
          end, { expr = true })

          -- Jump to prev hunk
          map('n', '[c', function()
            if vim.wo.diff then return '[c' end
            vim.schedule(function() gs.prev_hunk() end)
            return '<Ignore>'
          end, { expr = true })

          -- Actions
          map('n', '<leader>hu', gs.undo_stage_hunk)
          map('n', '<leader>hs', gs.stage_hunk)
          map('n', '<leader>hr', gs.reset_hunk)

          -- Text object
          map({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
        end
      })
    end
  },

  -- {
  --   -- 'rose-pine/neovim',
  --   'montlebalm/rose-pine-neovim',
  --   lazy = false,
  --   priority = 1000,
  --   config = function()
  --     require('rose-pine').setup({
  --       bold_vert_split = true,
  --       dim_nc_background = true,
  --       disable_background = true,
  --       highlight_groups = {
  --         StatusLine = { bg = 'highlight_low', fg = 'subtle', },
  --         User1 = { bg = 'highlight_low', fg = 'subtle', },
  --         ['@tag.attribute.tsx'] = { fg = 'subtle' },
  --         LazyDimmed = { fg = 'subtle', },
  --         Pmenu = { bg = 'highlight_med', },
  --       },
  --     })
  --
  --     vim.cmd.colorscheme('rose-pine')
  --   end
  -- },

  {
    'chriskempson/base16-vim',
    lazy = false,
    priority = 1000,
    config = function()
      vim.cmd.colorscheme('base16-grayscale-dark')

      vim.cmd('hi Normal ctermbg=NONE')
      vim.cmd('hi SignColumn ctermbg=NONE')

      vim.cmd('hi Comment ctermfg=10')
      -- vim.cmd('hi NonText ctermfg=10')

      -- Statusline
      vim.cmd('hi Statusline ctermbg=10')
      vim.cmd('hi User1 ctermbg=11')

      -- Highlights
      vim.cmd('hi Visual ctermfg=0 ctermbg=13')
      vim.cmd('hi Search ctermfg=0 ctermbg=13')

      -- Import keywords
      --   import { foo } from 'bar'
      --   ^^^^^^
      vim.cmd('hi Include ctermfg=8')

      -- TSX property names
      --   <div foo="bar" />
      --        ^^^
      vim.cmd('hi Tag ctermfg=8')

      -- Variables
      --   const foo = 1
      --         ^^^
      vim.cmd('hi Identifier ctermfg=7')
    end
  },

  -- "gc" to comment visual regions/lines
  {
    'numToStr/Comment.nvim',
    dependencies = {
      'suy/vim-context-commentstring',
    },
    opts = {}
  },

  -- Fuzzy Finder (files, lsp, etc)
  {
    'nvim-telescope/telescope.nvim',
    branch = '0.1.x',
    dependencies = {
      'nvim-lua/plenary.nvim'
    }
  },

  -- Fuzzy Finder Algorithm which requires local dependencies to be built.
  -- Only load if `make` is available. Make sure you have the system
  -- requirements installed.
  {
    'nvim-telescope/telescope-fzf-native.nvim',
    -- NOTE: If you are having trouble with this installation,
    --       refer to the README for telescope-fzf-native for more instructions.
    build = 'make',
    cond = function()
      return vim.fn.executable 'make' == 1
    end,
  },

  -- References, diagnostics
  {
    "folke/trouble.nvim",
    -- dependencies = {
    --   "nvim-tree/nvim-web-devicons"
    -- },
    config = function()
      require("trouble").setup({
        icons = false,
        fold_open = "-",      -- icon used for open folds
        fold_closed = "+",    -- icon used for closed folds
        indent_lines = false, -- add an indent guide below the fold icons
        signs = {
          -- icons / text used for a diagnostic
          error = "error",
          warning = "warn",
          hint = "hint",
          information = "info"
        },
        -- Enabling this will use the signs defined in your lsp client
        use_diagnostic_signs = false
      })

      -- View references
      vim.keymap.set("n", "<leader>rr", function()
        require("trouble").open("lsp_references")
      end)
      vim.keymap.set("n", "gr", function()
        require("trouble").open("lsp_references")
      end)

      -- View diagnostics
      vim.keymap.set("n", "<leader>sd", function()
        require("trouble").open("workspace_diagnostics")
      end)
    end
  },

  -- Highlight, edit, and navigate code
  {
    'nvim-treesitter/nvim-treesitter',
    dependencies = {
      'nvim-treesitter/nvim-treesitter-textobjects',
      -- {
      --   'elgiano/nvim-treesitter-angular',
      --   branch = 'topic/jsx-fix',
      -- }
    },
    config = function()
      pcall(require('nvim-treesitter.install').update { with_sync = true })
    end,
  },

  -- Formatting
  { 'nvimtools/none-ls.nvim' },

  -- Format on save
  {
    'neovim/nvim-lspconfig',
    config = function()
      -- Switch for controlling whether you want autoformatting.
      --  Use :KickstartFormatToggle to toggle autoformatting on or off
      local format_is_enabled = true
      vim.api.nvim_create_user_command('KickstartFormatToggle', function()
        format_is_enabled = not format_is_enabled
        print('Setting autoformatting to: ' .. tostring(format_is_enabled))
      end, {})

      -- Create an augroup that is used for managing our formatting autocmds.
      --      We need one augroup per client to make sure that multiple clients
      --      can attach to the same buffer without interfering with each other.
      local _augroups = {}
      local get_augroup = function(client)
        if not _augroups[client.id] then
          local group_name = 'kickstart-lsp-format-' .. client.name
          local id = vim.api.nvim_create_augroup(group_name, { clear = true })
          _augroups[client.id] = id
        end

        return _augroups[client.id]
      end

      -- Whenever an LSP attaches to a buffer, we will run this function.
      --
      -- See `:help LspAttach` for more information about this autocmd event.
      vim.api.nvim_create_autocmd('LspAttach', {
        group = vim.api.nvim_create_augroup('kickstart-lsp-attach-format', { clear = true }),
        -- This is where we attach the autoformatting for reasonable clients
        callback = function(args)
          local client_id = args.data.client_id
          local client = vim.lsp.get_client_by_id(client_id)
          local bufnr = args.buf

          -- Only attach to clients that support document formatting
          if not client.server_capabilities.documentFormattingProvider then
            return
          end

          -- Tsserver usually works poorly. Sorry you work with bad languages
          -- You can remove this line if you know what you're doing :)
          if client.name == 'tsserver' then
            return
          end

          -- Create an autocmd that will run *before* we save the buffer.
          --  Run the formatting command for the LSP that has just attached.
          vim.api.nvim_create_autocmd('BufWritePre', {
            group = get_augroup(client),
            buffer = bufnr,
            callback = function()
              if not format_is_enabled then
                return
              end

              vim.lsp.buf.format {
                async = false,
                filter = function(c)
                  return c.id == client.id
                end,
              }
            end,
          })
        end,
      })
    end,
  },

  -- View file tree
  -- { 'nvim-tree/nvim-tree.lua' },
  'nvim-telescope/telescope-file-browser.nvim',

  -- Automatically create missing directories
  { 'duggiefresh/vim-easydir' },

  -- Github Copilot
  {
    'github/copilot.vim',
    config = function()
      vim.g.copilot_filetypes = {
        TelescopePrompt = false,
      }

      vim.g.copilot_no_tab_map = true
      vim.g.copilot_assume_mapped = true
      vim.g.copilot_tab_fallback = ""

      vim.api.nvim_set_keymap("i", "<C-J>", 'copilot#Accept("<CR>")', { silent = true, expr = true })
    end
  },

  -- Reload browser
  {
    'montlebalm/vim-reload-browser',
    config = function()
      vim.g.reload_browser_chrome = 1
      -- vim.g.reload_browser_firefox = 1
      -- vim.g.reload_browser_safari = 1
      -- vim.g.reload_browser_safari_tech_preview = 1

      vim.api.nvim_set_keymap("n", "<leader>rs", ":call ReloadBrowser()<cr>", { silent = true, noremap = true })
    end
  },
}, {})

-- Keep cursor in the center of the screen
vim.opt.scrolloff = 10

-- Set highlight on search
vim.o.hlsearch = true

-- Don't wrap when hitting final search result
vim.o.wrapscan = false

-- Enable mouse mode
vim.o.mouse = 'a'

-- Sync clipboard between OS and Neovim.
vim.o.clipboard = 'unnamedplus'

-- Enable break indent
vim.o.breakindent = true

-- Save undo history
vim.o.undofile = true

-- Case insensitive searching UNLESS /C or capital in search
vim.o.ignorecase = true
vim.o.smartcase = true

-- Keep signcolumn on by default
vim.wo.signcolumn = 'yes'

-- Decrease update time
vim.o.updatetime = 250
vim.o.timeout = true
vim.o.timeoutlen = 300

-- Tabs
vim.o.tabstop = 2
vim.o.shiftwidth = 2
vim.o.expandtab = true

-- Indent lines
-- vim.opt.list = true
-- vim.opt.listchars = {
--   -- leadmultispace = "│   ",
--   multispace = "│ ",
--   tab = "│ ",
-- }

-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

-- NOTE: You should make sure your terminal supports this
-- vim.o.termguicolors = true

-- Don't wrap
vim.o.wrap = false

--
-- Basic keymaps
--

-- Easier command character
vim.keymap.set("n", ";", ":")

-- Easier escape
vim.keymap.set("i", "jj", "<esc>")

-- Keymaps for better default experience
vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })

-- Remap for dealing with word wrap
vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })

-- Window navigation
vim.keymap.set("n", "<c-j>", "<c-w>j")
vim.keymap.set("n", "<c-k>", "<c-w>k")
vim.keymap.set("n", "<c-l>", "<c-w>l")
vim.keymap.set("n", "<c-h>", "<c-w>h")

-- Stay at current occurence when using "*"
vim.keymap.set("n", "*", "*``")

-- Resize splits equally
vim.keymap.set("n", "<leader>=", "<c-W>=")

-- Clear seach highlight
vim.keymap.set("n", "<leader>/", ":noh<CR>")

-- Open the directory of the current file
vim.cmd([[map <leader>o :!open <C-R>=expand("%:p:h")<CR><CR>]])

-- Start edit command with the path of the current file
vim.cmd([[map <leader>e :e <C-R>=expand("%:h") . "/"<CR>]])

-- <enter> makes a newline (except in quickfix)
vim.cmd([[nnoremap <expr> <CR> &buftype ==# 'quickfix' ? "\<CR>" : 'o<esc>']])

-- Visual shifting (does not exit Visual mode)
vim.keymap.set("v", "<", "<gv")
vim.keymap.set("v", ">", ">gv")

-- Move current line / visual line selection up or down.
vim.keymap.set("v", "<C-j>", ":m'>+<CR>gv=gv")
vim.keymap.set("v", "<C-k>", ":m-2<CR>gv=gv")

-- Highlight on yank
local highlight_group = vim.api.nvim_create_augroup('YankHighlight', { clear = true })
vim.api.nvim_create_autocmd('TextYankPost', {
  callback = function()
    vim.highlight.on_yank()
  end,
  group = highlight_group,
  pattern = '*',
})

--
-- Telescope
--

local telescope = require('telescope')
local telescope_actions = require('telescope.actions')
local telescope_builtin = require('telescope.builtin')
local telescope_trouble = require('trouble.providers.telescope')
local telescope_fb = require("telescope._extensions.file_browser.actions")

telescope.setup {
  defaults = {
    layout_strategy = 'vertical',
    layout_config = {
      height = vim.o.lines,
      width = vim.o.columns,
      prompt_position = "bottom",
    },
    mappings = {
      i = {
        ['<C-j>'] = telescope_actions.move_selection_next,
        ['<C-k>'] = telescope_actions.move_selection_previous,
        ['<Down>'] = telescope_actions.move_selection_next,
        ['<Up>'] = telescope_actions.move_selection_previous,
        ["<s-Down>"] = telescope_actions.cycle_history_next,
        ["<s-Up>"] = telescope_actions.cycle_history_prev,
        ["<C-q>"] = telescope_trouble.open_with_trouble,
      },
    },
  },
  pickers = {
    buffers = {
      ignore_current_buffer = true,
      sort_mru = true,
    },
  },
  extensions = {
    file_browser = {
      dir_icon = '>',
      hijack_netrw = true,
      mappings = {
        ['n'] = {
          ["-"] = telescope_fb.goto_parent_dir,
        }
      }
    }
  },
}

-- Enable telescope fzf native, if installed
pcall(telescope.load_extension, 'fzf')
pcall(telescope.load_extension, 'file_browser')

vim.keymap.set('n', '<leader>b', telescope_builtin.buffers, { desc = '[ ] Find existing buffers' })
vim.keymap.set('n', '<leader>p', telescope_builtin.find_files, { desc = '[S]earch [F]iles' })
vim.keymap.set('n', '<leader>f', telescope_builtin.live_grep, { desc = '[S]earch by [G]rep' })

vim.keymap.set('n', '<leader>sh', telescope_builtin.help_tags, { desc = '[S]earch [H]elp' })
vim.keymap.set('n', '<leader>sw', telescope_builtin.grep_string, { desc = '[S]earch current [W]ord' })
-- vim.keymap.set('n', '<leader>sd', telescope_builtin.diagnostics, { desc = '[S]earch [D]iagnostics' })

vim.keymap.set('n', '<leader>k', ":Telescope file_browser path=%:p:h select_buffer=true<CR><esc>")

--
-- nvim-treesitter
--

require('nvim-treesitter.configs').setup {
  -- Add languages to be installed here that you want installed for treesitter
  ensure_installed = {
    'graphql',
    'javascript',
    'lua',
    'scss',
    'svelte',
    'tsx',
    'typescript',
    'vim',
    'vimdoc',
  },

  -- Autoinstall languages that are not installed. Defaults to false (but you can change for yourself!)
  auto_install = true,

  highlight = { enable = true },
  indent = { enable = true, disable = { 'python' } },
  incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = '<c-space>',
      node_incremental = '<c-space>',
      scope_incremental = '<c-s>',
      node_decremental = '<M-space>',
    },
  },
  textobjects = {
    select = {
      enable = true,
      lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ['aa'] = '@parameter.outer',
        ['ia'] = '@parameter.inner',
        ['af'] = '@function.outer',
        ['if'] = '@function.inner',
        ['ac'] = '@class.outer',
        ['ic'] = '@class.inner',
      },
    },
    move = {
      enable = true,
      set_jumps = true, -- whether to set jumps in the jumplist
      goto_next_start = {
        [']m'] = '@function.outer',
        [']]'] = '@class.outer',
      },
      goto_next_end = {
        [']M'] = '@function.outer',
        [']['] = '@class.outer',
      },
      goto_previous_start = {
        ['[m'] = '@function.outer',
        ['[['] = '@class.outer',
      },
      goto_previous_end = {
        ['[M'] = '@function.outer',
        ['[]'] = '@class.outer',
      },
    },
    swap = {
      enable = true,
      swap_next = {
        ['<leader>a'] = '@parameter.inner',
      },
      swap_previous = {
        ['<leader>A'] = '@parameter.inner',
      },
    },
  },
}

--
-- LSP
--

--  This function gets run when an LSP connects to a particular buffer.
local on_attach = function(_, bufnr)
  -- Create a function that lets us more easily define mappings specific
  -- for LSP related items. It sets the mode, buffer and description for us each time.
  local nmap = function(keys, func, desc)
    if desc then
      desc = 'LSP: ' .. desc
    end

    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
  end

  nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
  -- nmap('<leader>rr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
  nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

  nmap('gd', vim.lsp.buf.definition, '[G]oto [D]efinition')
  nmap('gI', vim.lsp.buf.implementation, '[G]oto [I]mplementation')
  nmap('gT', vim.lsp.buf.type_definition, 'Type [D]efinition')
  -- nmap('<leader>D', vim.lsp.buf.type_definition, 'Type [D]efinition')
  nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
  nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

  -- Diagnostics
  nmap("<leader>an", vim.diagnostic.goto_next, "Goto next diagnostic")
  nmap("<leader>ap", vim.diagnostic.goto_prev, "Goto prev diagnostic")
  nmap('<leader>am', vim.diagnostic.open_float, "Open floating diagnostic message")
  nmap('<leader>al', vim.diagnostic.setloclist, "Open diagnostics list")

  -- See `:help K` for why this keymap
  nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
  -- nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

  -- Lesser used LSP functionality
  nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')

  -- Fix lint errors
  nmap('gl', ':EslintFixAll<CR>', 'Fix lint errors')
end

-- Enable the following language servers
--  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
--
--  Add any additional override configuration in the following tables. They will be passed to
--  the `settings` field of the server config. You must look up that documentation yourself.
local servers = {
  cssls = {},
  eslint = {
    format = false
  },
  lua_ls = {
    Lua = {
      workspace = { checkThirdParty = false },
      telemetry = { enable = false },
    },
  },
  svelte = {},
  tsserver = {},
}

-- nvim-cmp supports additional completion capabilities, so broadcast that to servers
local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

-- Setup mason so it can manage external tooling
require('mason').setup()

-- Ensure the servers above are installed
local mason_lspconfig = require('mason-lspconfig')

mason_lspconfig.setup {
  ensure_installed = vim.tbl_keys(servers),
}

mason_lspconfig.setup_handlers {
  function(server_name)
    require('lspconfig')[server_name].setup {
      capabilities = capabilities,
      on_attach = on_attach,
      settings = servers[server_name],
    }
  end,
}

--
-- null-ls
--

-- Diagnostic icons
local signs = { Error = "■", Warn = "□", Hint = "??", Info = "ⁱⁱ" }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

-- Diagnostic text
vim.diagnostic.config({
  virtual_text = false,
  signs = true,
  underline = true,
  update_in_insert = false,
  severity_sort = false,
})

local null_ls = require('null-ls')
null_ls.setup({
  capabilities = capabilities,
  sources = {
    -- null_ls.builtins.formatting.black,
    null_ls.builtins.formatting.prettier.with({
      prefer_local = "node_modules/.bin",
    }),
    -- require('typescript.extensions.null-ls.code-actions'),
  },
  on_attach = on_attach
})

-- You will likely want to reduce updatetime which affects CursorHold
-- https://github.com/neovim/nvim-lspconfig/wiki/UI-customization#show-line-diagnostics-automatically-in-hover-window
vim.o.updatetime = 250
vim.cmd([[autocmd! CursorHold,CursorHoldI * lua vim.diagnostic.open_float(nil, {focus=false})]])

--
-- nvim-cmp
--

local cmp = require 'cmp'
local luasnip = require 'luasnip'

require("luasnip.loaders.from_vscode").lazy_load({
  paths = { "./luasnips" }
})

luasnip.config.setup {}

cmp.setup {
  enabled = function()
    return true
  end,
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end,
  },
  mapping = cmp.mapping.preset.insert {
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete {},
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_next_item()
      elseif luasnip.expand_or_jumpable() then
        luasnip.expand_or_jump()
      else
        fallback()
      end
    end, { 'i', 's' }),
    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, { 'i', 's' }),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
  },
}

--
-- nvim-tree
--

-- vim.g.loaded_netrw = 1
-- vim.g.loaded_netrwPlugin = 1
--
-- require("nvim-tree").setup({
--   actions = {
--     open_file = {
--       quit_on_open = true,
--     }
--   },
--   renderer = {
--     icons = {
--       show = {
--         file = false,
--         folder = false,
--         folder_arrow = false,
--         git = false,
--         modified = false,
--       },
--       webdev_colors = false,
--     }
--   },
-- })
--
-- local toggleTree = function()
--   require("nvim-tree.api").tree.toggle({
--     find_file = true,
--     current_window = true,
--   })
-- end
-- vim.keymap.set('n', '<leader>k', toggleTree, { desc = "Toggle NvimTree", silent = true })

--
-- Statusline
--

vim.cmd([[

set statusline=
set statusline+=\ %{expand('%:p:h:t')}/%t   " file name
set statusline+=%m%r                        " modified, readonly
set statusline+=\                           " spacer
set statusline+=%<                          " truncate here if needed
set statusline+=%=                          " switch to RHS
set statusline+=%1*\ %l/%L:%c\              " number of lines

]])

-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et
